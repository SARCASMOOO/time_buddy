{"version":3,"sources":["App/components/Layout/Layout.module.css","App/components/Layout/Layout.tsx","App/components/Navigation/SideMenu/SideMenu.tsx","App/components/Navigation/SelectSchool/Search/Search.tsx","App/components/Navigation/SelectSchool/SelectSchool.tsx","App/components/Navigation/Navigation.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Layout","children","className","classes","SideMenu","React","useState","left","state","setState","toggleDrawer","anchor","open","event","type","key","map","Fragment","Button","style","color","onClick","Drawer","onClose","role","onKeyDown","List","text","index","ListItem","width","button","ListItemIcon","ListItemText","primary","Divider","list","Search","getModalStyle","top","margin","useStyles","makeStyles","theme","createStyles","paper","position","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","SelectSchool","modalStyle","setOpen","body","id","variant","Modal","aria-labelledby","aria-describedby","display","alignItems","justifyContent","root","flexGrow","menuButton","marginRight","title","Navigation","AppBar","height","Toolbar","IconButton","edge","aria-label","Typography","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1333d61e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__1bNdf\"};","import React, {ReactNode} from \"react\";\n\n// Styles\nimport classes from './Layout.module.css';\n\n// Interfaces\ninterface Props {\n    children: ReactNode;\n}\n\nconst Layout = ({children}: Props) => (<div className={classes.Layout}>{children}</div>);\n\nexport default Layout;","import React, {ReactNode} from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport MenuIcon from \"@material-ui/icons/Menu\";\n\ntype Anchor = 'left';\n\ninterface Props {\n    children: ReactNode;\n}\n\nconst SideMenu = ({children} : Props) => {\n    const [state, setState] = React.useState({\n        left: false,\n    });\n\n    const toggleDrawer = (anchor: Anchor, open: boolean) => (\n        event: React.KeyboardEvent | React.MouseEvent,\n    ) => {\n        if (\n            event.type === 'keydown' &&\n            ((event as React.KeyboardEvent).key === 'Tab' ||\n                (event as React.KeyboardEvent).key === 'Shift')\n        ) {\n            return;\n        }\n\n        setState({ ...state, [anchor]: open });\n    };\n\n    const list = (anchor: Anchor) => (\n        <div\n            role=\"presentation\"\n            onClick={toggleDrawer(anchor, false)}\n            onKeyDown={toggleDrawer(anchor, false)}>\n            <List>\n                {['Time Buddy'].map((text, index) => (\n                    <ListItem style={{width: '300px'}} button key={text}>\n                        <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n                        <ListItemText primary={text} />\n                    </ListItem>\n                ))}\n            </List>\n            <Divider/>\n            <List>\n                {['Sign In', 'Sign Up'].map((text, index) => (\n                    <ListItem style={{width: '300px'}} button key={text}>\n                        <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n                        <ListItemText primary={text} />\n                    </ListItem>\n                ))}\n            </List>\n        </div>\n    );\n\n    return (\n        <div>\n            {(['left'] as Anchor[]).map((anchor) => (\n                <React.Fragment key={anchor}>\n                    <Button style={{color: \"white\"}} onClick={toggleDrawer(anchor, true)}>\n                        {children}\n                    </Button>\n                    <Drawer anchor={anchor} open={state[anchor]} onClose={toggleDrawer(anchor, false)}>\n                        {list(anchor)}\n                    </Drawer>\n                </React.Fragment>\n            ))}\n        </div>\n    );\n}\n\nexport default SideMenu;","import React from \"react\";\n\nconst Search = () => <h1>Test</h1>;\nexport default Search;","import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport { Button } from '@material-ui/core';\nimport Search from './Search/Search';\n\nfunction getModalStyle() {\n    const top = 30;\n    return {\n        top: `${top}%`,\n        margin:'auto',\n        width: \"400px\"\n    };\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        paper: {\n            position: 'absolute',\n            backgroundColor: theme.palette.background.paper,\n            border: '2px solid #000',\n            boxShadow: theme.shadows[5],\n            padding: theme.spacing(2, 4, 3),\n        },\n    }),\n);\n\nexport default function SelectSchool() {\n    const classes = useStyles();\n    // getModalStyle is not a pure function, we roll the style only on the first render\n    const [modalStyle] = React.useState(getModalStyle);\n    const [open, setOpen] = React.useState(false);\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const body = (\n        <div style={modalStyle} className={classes.paper}>\n            <h2 id=\"simple-modal-title\">School</h2>\n            <p id=\"simple-modal-description\">\n                Select your school.\n            </p>\n            <Search/>\n        </div>\n    );\n\n    return (\n        <div>\n            <Button onClick={handleOpen} style={{color: \"white\"}} variant=\"outlined\">\n                Select School\n            </Button>\n            <Modal\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\"\n                style={{\n                    display:'flex',\n                    alignItems:'center',\n                    justifyContent:'center',\n                }}\n            >\n                {body}\n            </Modal>\n        </div>\n    );\n}","import React from \"react\";\n\n// Styles\nimport classes from './Navigation.module.css';\n\n// Components\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\nimport SideMenu from \"./SideMenu/SideMenu\";\nimport SelectSchool from \"./SelectSchool/SelectSchool\";\n\n// Interfaces\ninterface Props {\n\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n        },\n        menuButton: {\n            marginRight: theme.spacing(2),\n        },\n        title: {\n            flexGrow: 1,\n        },\n    }),\n);\n\nconst Navigation = ({}: Props) => {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <AppBar style={{height: '100%', backgroundColor: '#02baa8'}} position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n                        <SideMenu> <MenuIcon /> </ SideMenu >\n                    </IconButton>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Logo\n                    </Typography>\n                    <SelectSchool />\n                </Toolbar>\n            </AppBar>\n        </div>);\n}\n\nexport default Navigation;\n\n\n","import React from 'react';\nimport './App.css';\n\n// Components\nimport Layout from \"./components/Layout/Layout\";\nimport Navigation from \"./components/Navigation/Navigation\";\n\nconst App = () => <Layout>\n    <Navigation/>\n    <div style={{backgroundColor: \"blue\"}}>Test 2</div>\n    <div style={{backgroundColor: \"cyan\"}}>Test 3</div>\n</Layout>;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}